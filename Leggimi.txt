Visual Studio CODE
------------------------

Estensioni:
- Angular Language Service  v19.0.2 Angular
- Angular Snippets          v18.0.2 John Papa
- Material Icon Theme       v5.14.1 Philipp Kief



Git
------------------------
sudo apt install git

git version         (2.39.5)

git config --global user.name "esserenuovo"
git config --global user.email "maspud@hotmail.com"

Git: Guida per principianti (terminale, visual studio code e Github)
https://www.youtube.com/watch?v=CJunErtZPRM

CREARE un repository vuoto con nome micart senza README.md

Da dentro la cartella /home/massimiliano/Progetti/micart/

git init

git add *.*
git add front-end/

# git add <file>

git status
git branch -a
git branch -M main

git commit -am "Base di partenza Angular"

git remote add origin https://github.com/esserenuovo/micart.git
git push -u origin main

Per tornare indietro nelle modifiche:

git log
git reset HEAD~    
Questo comando dice a git di lasciare la nostra directory di lavoro com’era prima dell’ultimo commit e lo annulla. A questo punto riavrete i file come unstaged proprio come se fossimo tornati in dietro nel tempo. A questo punto eseguiamo le modifiche che desideriamo.




Configurazione rapida: se hai già fatto questo tipo di cose
https://github.com/esserenuovo/micart.git
Inizia da:
- Creazione di un nuovo file (https://github.com/esserenuovo/micart/new/main) 
o 
- Caricamento di un file esistente (https://github.com/esserenuovo/micart/upload). 
oppure:

…or create a new repository on the command line

git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/esserenuovo/micart.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/esserenuovo/micart.git
git branch -M main
git push -u origin main


Node.js
------------------------
Installare nvm, versione attuale 0.40.0

wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash

Chiudere e riaprire il terminale

    nvm install 22      (22.11.0) 

node -v

nvm which node
/home/massimiliano/.nvm/versions/node/v22.11.0/bin/node

nvm which default
/home/massimiliano/.nvm/versions/node/v22.11.0/bin/node


Angular
------------------------
Angular 	        Node.js 	                        TypeScript 	    RxJS
19.0.x 	            ^18.19.1 || ^20.11.1 || ^22.0.0 	>=5.5.0 <5.7.0 	^6.5.3 || ^7.4.0
18.1.x || 18.2.x 	^18.19.1 || ^20.11.1 || ^22.0.0 	>=5.4.0 <5.6.0 	^6.5.3 || ^7.4.0
18.0.x 	            ^18.19.1 || ^20.11.1 || ^22.0.0 	>=5.4.0 <5.5.0 	^6.5.3 || ^7.4.0

Version 	Status 	Released 	Active ends     LTS ends
^19.0.0 	Active 	2024-11-19 	2025-05-19 	    2026-05-19
^18.0.0 	LTS 	2024-05-22 	2024-11-19 	    2025-11-19
^17.0.0 	LTS 	2023-11-08 	2024-05-08 	    2025-05-15

npm install -g @angular/cli@18

ng --version    (18.2.12)

cd /Progetti/micart/front-end

ng new micart -S

cd micart

npm start

q + enter

////////////////////////
npm uninstall -g @angular/cli
npm cache clean --force

Angular Material
------------------------
ng add @angular/material

https://material.angular.io?theme=azure-blue

npm start
////////////////////////
npm uninstall angular/material

Angular NgRx da installare per la versione 18 di Angular
------------------------
ng add @ngrx/store@latest   (18.1.1)
o
npm install @ngrx/store --save


Angular CLI: 18.2.12
Node: 22.11.0
Package Manager: npm 10.9.0
OS: linux x64

Angular: 18.2.12
... animations, cli, common, compiler, compiler-cli, core, forms
... platform-browser, platform-browser-dynamic, router

Package                         Version
---------------------------------------------------------
@angular-devkit/architect       0.1802.12
@angular-devkit/build-angular   18.2.12
@angular-devkit/core            18.2.12
@angular-devkit/schematics      18.2.12
@angular/cdk                    18.2.14
@angular/material               18.2.14
@schematics/angular             18.2.12
rxjs                            7.8.1
typescript                      5.5.4
zone.js                         0.14.10



Java
------------------------
https://download.oracle.com/java/23/latest/jdk-23_linux-x64_bin.deb

java -version

Spring
------------------------
https://start.spring.io/



PostGreSQL
------------------------
sudo apt install -y postgresql-common
sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh

sudo apt update

sudo apt install postgresql
sudo apt install postgresql-client

https://wiki.postgresql.org/wiki/Apt
https://wiki.postgresql.org/wiki/Apt/FAQ

https://www.tosolini.info/2020/09/linux-installare-e-configurare-postgresql/

Per accedere alla command line del database per prima cosa dobbiamo cambiare utente:

sudo -i -u postgres

psql

\q

sudo -u postgres createuser --interactive  (massimiliano superuser)

il passo successivo è quello di creare un database. Quello che consiglio è di avere una sorta di continuità logica, ovvero il nome utente deve essere uguale al nome del database.

sudo -u postgres createdb micart

sudo -u postgres createuser --interactive (micart superuser)

Ctrl+Alt+F4
micart
6?!!X!!d

psql
\conninfo
CREATE TABLE prova ( id serial PRIMARY KEY);
\d
exit

Ctrl+Alt+F7 per tornare alla modalità grafica


Aprire il file:
/etc/postgresql/17/main/postgresql.conf
Cercare al suo interno data_directory, che specifica dove vengono salvati i database:
/var/lib/postgresql/17/main


listen_addresses = 'localhost'
port = 5432


pgAdmin4
------------------------
https://www.pgadmin.org/download/pgadmin-4-apt/

# Installare la chiave pubblica per il repository (se non è stato fatto in precedenza):

curl -fsS https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /usr/share/keyrings/packages-pgadmin-org.gpg

# Crea il file di configurazione del repository:

sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/packages-pgadmin-org.gpg] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'

# Installa pgAdmin4 solo per la modalità desktop:

sudo apt install pgadmin4-desktop


